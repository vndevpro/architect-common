<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GdNet.Common</name>
    </assembly>
    <members>
        <member name="T:GdNet.Common.DictionaryExtensions">
            <summary>
            Extension methods for Dictionary type
            </summary>
        </member>
        <member name="M:GdNet.Common.DictionaryExtensions.AddOrSet(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Adds new item into the dictionary if the key is not exist yet, otherwise update old value.
            </summary>
        </member>
        <member name="M:GdNet.Common.DictionaryExtensions.GetOrDefault(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Get item in a dictionary
            </summary>
        </member>
        <member name="M:GdNet.Common.DictionaryExtensions.GetOrDefault(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Get item in a dictionary
            </summary>
        </member>
        <member name="M:GdNet.Common.DictionaryExtensions.ToDynamic(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Convert a dictionary to dynamic object so we can access an item by its key
            </summary>
        </member>
        <member name="T:GdNet.Common.Direction">
            <summary>
            Sort direction
            </summary>
        </member>
        <member name="T:GdNet.Common.Entities.DynPropertyEntityBase">
            <summary>
            Base class for entities support to define new properties dynamically (values are stored in a dictionary)
            </summary>
        </member>
        <member name="T:GdNet.Common.Entities.IDynPropertyEntity">
            <summary>
            
            </summary>
        </member>
        <member name="P:GdNet.Common.Entities.IDynPropertyEntity.MetadataXml">
            <summary>
            Xml data for all dyn properties
            </summary>
        </member>
        <member name="F:GdNet.Common.Entities.DynPropertyEntityBase._metadata">
            <summary>
            Dictionary contains all dyn properties
            </summary>
        </member>
        <member name="M:GdNet.Common.Entities.DynPropertyEntityBase.SetProperty(System.String,System.String)">
            <summary>
            Add or change value of a property
            </summary>
        </member>
        <member name="M:GdNet.Common.Entities.DynPropertyEntityBase.GetProperty(System.String)">
            <summary>
            Get value of a property
            </summary>
        </member>
        <member name="P:GdNet.Common.Entities.DynPropertyEntityBase.MetadataXml">
            <summary>
            Gets or sets dynamic properties dictionary as string
            </summary>
        </member>
        <member name="T:GdNet.Common.FileSizeExtensions">
            <summary>
            Format file size from byte to most relevent unit
            </summary>
        </member>
        <member name="M:GdNet.Common.FileSizeExtensions.FormatByteSize(System.Int64)">
            <summary>
            Converts a numeric value into a string that represents the number expressed as a size value in bytes,
            kilobytes, megabytes, or gigabytes, depending on the size.
            </summary>
            <param name="fileSize">The numeric value to be converted.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:GdNet.Common.FileSizeExtensions.FormatByteSize(System.IO.FileInfo)">
            <summary>
            Converts a numeric value into a string that represents the number expressed as a size value in bytes,
            kilobytes, megabytes, or gigabytes, depending on the size.
            </summary>
            <param name="fileInfo"></param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:GdNet.Common.GuidExtensions.ToShortId(System.Guid)">
            <summary>
            Remove all '-' characters from a GUID
            </summary>
        </member>
        <member name="T:GdNet.Common.ObjectExtensions">
            <summary>
            Extension methods for Object
            </summary>
        </member>
        <member name="M:GdNet.Common.ObjectExtensions.ToDynamic(System.Object)">
            <summary>
            Convert an anonymous object to dynamic object so that it's possible to use on other namespaces (eg on cshtml)
            </summary>
        </member>
        <member name="T:GdNet.Common.PageExtensions">
            <summary>
            Extension methods for <see cref="T:GdNet.Common.Page">Page</see>
            </summary>
        </member>
        <member name="M:GdNet.Common.PageExtensions.IsValid(GdNet.Common.Page)">
            <summary>
            Test value of the page
            </summary>
        </member>
        <member name="M:GdNet.Common.PageExtensions.GetOffset(GdNet.Common.Page)">
            <summary>
            Calculate offset for first item of the page
            </summary>
        </member>
        <member name="M:GdNet.Common.PageExtensions.GetPageIndex(System.Nullable{System.Int32})">
            <summary>
            Zero based page index
            </summary>
        </member>
        <member name="T:GdNet.Common.RandomString">
            <summary>
            Generate new random string with difference options
            </summary>
        </member>
        <member name="M:GdNet.Common.RandomString.#ctor">
            <summary>
            New instance with default options (Length = 6 and only Numbers)
            </summary>
        </member>
        <member name="M:GdNet.Common.RandomString.#ctor(System.Int32,GdNet.Common.RandomString.Options)">
            <summary>
            New instance with custom options
            </summary>
        </member>
        <member name="M:GdNet.Common.RandomString.NextValue">
            <summary>
            Generate new random string with given options
            </summary>
        </member>
        <member name="T:GdNet.Common.RandomString.Options">
            <summary>
            Options use to generate new random string
            </summary>
        </member>
        <member name="F:GdNet.Common.RandomString.Options.Numbers">
            <summary>
            Generate only numbers
            </summary>
        </member>
        <member name="F:GdNet.Common.RandomString.Options.LowerChars">
            <summary>
            Generate only lower characters
            </summary>
        </member>
        <member name="F:GdNet.Common.RandomString.Options.UpperChars">
            <summary>
            Generate only upper characters
            </summary>
        </member>
        <member name="F:GdNet.Common.RandomString.Options.SpecialChars">
            <summary>
            Generate only special characters
            </summary>
        </member>
        <member name="F:GdNet.Common.RandomString.Options.Any">
            <summary>
            Expect any characters
            </summary>
        </member>
        <member name="T:GdNet.Common.ReflectionExtensions">
            <summary>
            Extension methods on reflection
            </summary>
        </member>
        <member name="M:GdNet.Common.ReflectionExtensions.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get PropertyInfo of the generic type
            </summary>
        </member>
        <member name="M:GdNet.Common.ReflectionExtensions.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Get property name by its expression
            </summary>
        </member>
        <member name="M:GdNet.Common.ReflectionExtensions.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get property name by its expression
            </summary>
        </member>
        <member name="T:GdNet.Common.ResultExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:GdNet.Common.ResultExtensions.ConvertTo``2(GdNet.Common.Result{``0},System.Func{``0,``1})">
            <summary>
            Convert a result set to another result set
            </summary>
            <param name="result">Source result set</param>
            <param name="action">The action will be performed for each item on the source result set</param>
        </member>
        <member name="M:GdNet.Common.ResultExtensions.ConvertTo``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Convert to result set
            </summary>
            <param name="result">Source result set</param>
            <param name="action">The action will be performed for each item on the source result set</param>
        </member>
        <member name="T:GdNet.Common.Services.Base64SafeEncoder">
            <summary>
            Encode/decode to/from base64 string with safe to use for URL
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.Base64SafeEncoder.Encode(System.Byte[])">
            <summary>
            Encode a byte array
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.Base64SafeEncoder.Encode(System.String)">
            <summary>
            Encode a string
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.Base64SafeEncoder.DecodeBytes(System.String)">
            <summary>
            Decode to a byte array
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.Base64SafeEncoder.Decode(System.String)">
            <summary>
            Decode to a string
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.WorkersImpl.DefaultEmailMaskingWorker">
            <summary>
            Masking email address by replacing 50% of characters by asterik
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.IEmailMaskingWorker">
            <summary>
            Masking worker contract
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.IEmailMaskingWorker.Mask(System.String)">
            <summary>
            Masking a given email address
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.WorkersImpl.DefaultEmailMaskingWorker.Mask(System.String)">
            <summary>
            Replace 50% of characters by asterik(s). Eg myemail@devcovery.com will be my***il@devcovery.com
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.WorkersImpl.DefaultStringEncryptionWorker">
            <summary>
            Encrypt and decrypt a string
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.IStringEncryptionWorker">
            <summary>
            Encrypt and decrypt a string
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.IStringEncryptionWorker.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.IStringEncryptionWorker.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a string
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.EmailMasker">
            <summary>
            Masking the email address to not readable string to avoid spammer taking the email
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.EmailMasker.Mask(System.String)">
            <summary>
            Masking a given email address
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.EmailMasker.Mask(System.String,GdNet.Common.Services.IEmailMaskingWorker)">
            <summary>
            Masking a given email address
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.IFileService">
            <summary>
            Simple file service
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.IFileService.SaveFile(System.String,System.String)">
            <summary>
            Save the text into a file that is translated from virtual path
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.IFileService.GetFile(System.String)">
            <summary>
            Get content of the file from its virtual path
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.OperationResult">
            <summary>
            Represent result of an operation with result default to object type
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.OperationResult`1">
            <summary>
            Represent result of an operation
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.OperationResult`1.#ctor">
            <summary>
            Instantiate an instance with result to false
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.OperationResult`1.#ctor(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="P:GdNet.Common.Services.OperationResult`1.Result">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="P:GdNet.Common.Services.OperationResult`1.Data">
            <summary>
            Output data returns by the operation
            </summary>
        </member>
        <member name="P:GdNet.Common.Services.OperationResult`1.Message">
            <summary>
            The message output of the operation. It could be error message if Result is false
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.OperationResult.#ctor">
            <summary>
            Instantiate an instance with result to false
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.OperationResult.#ctor(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.SimpleFileService">
            <summary>
            Simple file service impl
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.SimpleFileService.#ctor(System.String)">
            <summary>
            Create the service to work with a root folder
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.SimpleFileService.SaveFile(System.String,System.String)">
            <summary>
            Save a string into a file
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.SimpleFileService.GetFile(System.String)">
            <summary>
            Read all text from given file
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.WorkersImpl.StringCipher">
            <summary>
            Source code is from https://stackoverflow.com/a/10177020/4903729
            </summary>
        </member>
        <member name="T:GdNet.Common.Services.StringEncryptor">
            <summary>
            Encrypt and decrypt a string
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.StringEncryptor.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string with default worker
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.StringEncryptor.Encrypt(System.String,System.String,GdNet.Common.Services.IStringEncryptionWorker)">
            <summary>
            Encrypt a string
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.StringEncryptor.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a string with default worker
            </summary>
        </member>
        <member name="M:GdNet.Common.Services.StringEncryptor.Decrypt(System.String,System.String,GdNet.Common.Services.IStringEncryptionWorker)">
            <summary>
            Decrypt a string
            </summary>
        </member>
        <member name="T:GdNet.Common.StringExtensions">
            <summary>
            Extension methods for String
            </summary>
        </member>
        <member name="M:GdNet.Common.StringExtensions.TrimSafe(System.String)">
            <summary>
            Trim a string
            </summary>
        </member>
        <member name="M:GdNet.Common.StringExtensions.GetSafeFileName(System.String,System.String)">
            <summary>
            Build a safe file name from a given string candidate. The result file will have no space.
            </summary>
        </member>
        <member name="M:GdNet.Common.StringExtensions.ToVietnameseNoSign(System.String)">
            <summary>
            Convert unicode string to ascii
            </summary>
        </member>
        <member name="T:GdNet.Common.TypeExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:GdNet.Common.TypeExtensions.IsImplemented(System.Type,System.Type)">
            <summary>
            Check the given type is implemented a given interface or not
            </summary>
        </member>
        <member name="T:GdNet.Common.Page">
            <summary>
            Pagination info
            </summary>
        </member>
        <member name="M:GdNet.Common.Page.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="itemsPerPage"></param>
        </member>
        <member name="P:GdNet.Common.Page.AllItems">
            <summary>
            The page which contains all items
            </summary>
        </member>
        <member name="P:GdNet.Common.Page.Default">
            <summary>
            Construct a new page with pageIndex = 0 an itemsPerPage = 10
            </summary>
        </member>
        <member name="P:GdNet.Common.Page.PageIndex">
            <summary>
            Zero based page number
            </summary>
        </member>
        <member name="P:GdNet.Common.Page.ItemsPerPage">
            <summary>
            Number of items to be fetched
            </summary>
        </member>
        <member name="T:GdNet.Common.Result`1">
            <summary>
            Object to hold a page of items
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:GdNet.Common.Result`1.Empty">
            <summary>
            An empty page of items
            </summary>
        </member>
        <member name="M:GdNet.Common.Result`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:GdNet.Common.Result`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:GdNet.Common.Result`1.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:GdNet.Common.Result`1.Total">
            <summary>
            Total number of items in data source
            </summary>
        </member>
        <member name="T:GdNet.Common.XmlExtensions">
            <summary>
            Extension methods to work with XML
            </summary>
        </member>
        <member name="M:GdNet.Common.XmlExtensions.ToXml(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns a xml document for the dictionary, root element is items and child elements are item
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:GdNet.Common.XmlExtensions.ToXmlIgnoreNullOrEmpty(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Returns a xml document for the dictionary, root element is items and child elements are item (not containing any null or empty value on key/value)
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:GdNet.Common.XmlExtensions.ParseXml(System.String)">
            <summary>
            Parse xml doucment to dictionary, input must be value of ToXml method
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
    </members>
</doc>
